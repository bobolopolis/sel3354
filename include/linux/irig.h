///////////////////////////////////////////////////////////////////////////////
/// COPYRIGHT (C) 2007 Schweitzer Engineering Laboratories, Pullman, WA
///////////////////////////////////////////////////////////////////////////////
///  @file
///  irig.h
///
///  @brief
///  IRIG driver structures and defines
///
///  Requirements Spec: N/A
///
///  Design Description:
///
///////////////////////////////////////////////////////////////////////////////

#ifndef _IRIG_H_
#define _IRIG_H_

#include <linux/ioctl.h>
#include <linux/types.h>

// This structure is used to decode the information sent out by the IRIG driver
struct irig_time {
   __u32 frc;         /// The FRC at the time the data was read
   __u32 packet_frc;  /// The FRC associated with the IRIG time packet
   __u32 ts_diff;     /// FRC count diff between PPS pulses that FPGA is processing
   __u32 frc_tick;    /// Ticks per second
   __u32 dsp:1;       /// Is daylight savings time pending?
   __u32 dst:1;       /// Are we observing DST?
   __u32 c37_comp:1;  /// TRUE if the driver thinks the time source is C37.118 compliant
   __u16 year;
   __s16 day;
   __s16 hour;
   __s16 minute;
   __s16 second;
   __u16 time_quality;/// The quality of the incoming time data
   __s32 time_offset;   /// The amount the time packet varies from UTC scaled by 10
};

// Bitfield values for the IRIG registers
// Config register
#define DEMODULATED_SOURCE  0x0
#define MODULATED_SOURCE    0x1
#define EXTERNAL_PPS_SIGNAL 0x0
#define IRIG_PPS_SIGNAL     0x2
#define PASS_THRU_IRIG      0x0
#define GENERATE_IRIG       0x4
#define DISABLE_IRIG_OUTPUT 0x0
#define ENABLE_IRIG_OUTPUT  0x8

/// Bit definitions for the FPGA configuration register
#define IRIG_CONFIG_MOD           0     /// 0 - demodulated IRIG, 1 - modulated IRIG
#define IRIG_CONFIG_PPS           1     /// 0 - use external PPS, 1 - internal
#define IRIG_CONFIG_PASS_THROUGH  2     /// 0 - External IRIG pass through, 1 - internal
#define IRIG_CONFIG_ENABLE_OUT    3     /// 0 - Disable IRIG out, 1 - enable
#define IRIG_CONFIG_READ_1PPS     4     /// 1 if FPGA read an external PPS since last read
#define IRIG_CONFIG_READ_PPS      5     /// 1 if FPGA read an internal PPS since last read
#define IRIG_CONFIG_READ_PLL      6     /// 1 if FPGA read a PLL since last read
#define IRIG_CONFIG_IRIG_GOOD     7     /// 1 if incoming IRIG is good

// PLL Control register
#define FAST_TAPS           0x2

// Magic number for IRIG I/O control
#define IRIG_IOC_MAGIC 0xc1

// Read/Write a 32 bit value to the IRIG control register.  The IRIG control
// register has the following bit fields:
//    Bit 0 (R/W): Demodulated/Modulated IRIG input select
//                    0 = Incoming IRIG signal is demodulated
//                    1 = Incoming IRIG signal is modulated
//    Bit 1 (R/W): External/IRIG PPS signal select
//                    0 = Use PPS signal from external source
//                    1 = Use PPS signal generated by decoding IRIG input
//                    Note: Only valid if Bit 2 is '1' (i.e., only valid if
//                          generating IRIG internally).
//    Bit 2 (R/W): External/Internal output select
//                    0 = Pass the external IRIG signal through the FPGA
//                    1 = Internally generate the IRIG signal
//    Bit 3 (R/W) : IRIG output enable
//                    0 = Disabled
//                    1 = Enabled
//    Bit 4 (RO)  : IRIG PPS signal latch
//                    This bit is set when the PPS signal generated by
//                    decoding the IRIG input asserts.  It is cleared by
//                    reading the register.
//    Bit 5 (RO)  : External PPS signal latch
//                    This bit is set when the external PPS signal asserts.
//                    It is cleared by reading the register.
//    Bit 6 (RO)  : PPS PLL signal latch
//                    This bit is set when the PPS PLL feedback signal asserts.
//                    It is cleared by reading the register.
//    Bits 7 - 31 : Reserved, always write '0'
#define IRIG_IOC_W_CONFIG      _IOW(IRIG_IOC_MAGIC, 1, __u32)
#define IRIG_IOC_R_CONFIG      _IOR(IRIG_IOC_MAGIC, 2, __u32)

// Read/Write a 32 bit value to the IRIG PLL control register.  The PLL control
// register has the following bit fields:
//    Bit 0       : Reserved, always write '0'
//    Bit 1 (R/W) : Fast taps.  When set to '1' the PLL uses secondary filter
//                  coefficients that provide less filtering and faster
//                  settling times.
//    Bits 2 - 31 : Reserved, always write '0'
#define IRIG_IOC_W_PLL_CONTROL _IOW(IRIG_IOC_MAGIC, 3, __u32)
#define IRIG_IOC_R_PLL_CONTROL _IOR(IRIG_IOC_MAGIC, 4, __u32)

// Read/Write a 32 bit value to the IRIG PLL CPP register.  The PLL control
// register has the following bit fields:
//    Bits 0 - 31 : The number of CLK counts per PPS input.  This can be used
//                  to initialize the PLL to the desired frequency.
//                  NOTE: writting to this register will cause a phase and
//                  frequency shift in the PLL output.
#define IRIG_IOC_W_PLL_CPP     _IOW(IRIG_IOC_MAGIC, 5, __u32)
#define IRIG_IOC_R_PLL_CPP     _IOR(IRIG_IOC_MAGIC, 6, __u32)

// Read a 32 bit value from the IRIG PLL error register.  The PLL error
// register has the following bit fields:
//    Bits 0 - 31 (RO) : The number of CLK counts between the PLL input signal
//                       and the PLL feedback signal.  This can be used to
//                       determine the synchronization status of the PLL.  It is
//                       a 32-bit signed integer with positive numbers
//                       indicating the PLL feedback signal occurred before the
//                       PLL reference signal.
#define IRIG_IOC_R_PLL_ERROR   _IOR(IRIG_IOC_MAGIC, 7, __s32)

// Read/Write a 32 bit value to the IRIG PLL delay register.  The PLL delay
// register has the following bit fields:
//    Bits 0 - 15 : The number of CLK counts the PLL feedback signal is
//                  delayed.  Used to compensate for circuit delay.  (16 bits
//                  allows for a total of 2ms shift with a 33MHz PCI clock.)
//    Bits 16 - 31: Reserved, always write '0'
#define IRIG_IOC_W_PLL_DELAY   _IOW(IRIG_IOC_MAGIC, 8, __u32)
#define IRIG_IOC_R_PLL_DELAY   _IOR(IRIG_IOC_MAGIC, 9, __u32)
// Read the current FRC
#define IRIG_IOC_R_FRC   _IOR(IRIG_IOC_MAGIC, 10, __u32)

// Read the the FRC timestamp of the previous IRIG 1 PPS signal
#define IRIG_IOC_R_TS_IRIG_1PPS   _IOR(IRIG_IOC_MAGIC, 11, __u32)

// Read the FRC timestamp of the previous PPS pulse from the external source
#define IRIG_IOC_R_TS_PPS   _IOR(IRIG_IOC_MAGIC, 12, __u32)

// Read the difference between the PPS signals (i.e., TS_IRIG_1PPS - TS_PPS)
#define IRIG_IOC_R_TS_DIFF   _IOR(IRIG_IOC_MAGIC, 13, __s32)

// Read/Write a 32 bit value to the IRIG IRQ mask register.  The IRQ mask
// register has the following bit fields:
//    Bit 0 (R/W) : IRIG 1pps pulse interrupts
//                     1 - Enable interrupts
//                     0 - Disable interrupts
//    Bit 1 (R/W) : External 1pps pulse interrupts
//                     1 - Enable interrupts
//                     0 - Disable interrupts
//    Bit 2 (R/W) : PLL 1pps pulse interrupts
//                     1 - Enable interrupts
//                     0 - Disable interrupts
#define IRIG_IOC_W_IRQ_MASK   _IOW(IRIG_IOC_MAGIC, 14, __u32)
#define IRIG_IOC_R_IRQ_MASK   _IOR(IRIG_IOC_MAGIC, 15, __u32)

// Read/Write a 26 bit value to the PPS timer register.  This register sets
// the frequency of the internally generated 1PPS signal.
#define IRIG_IOC_W_PPS_TIMER   _IOW(IRIG_IOC_MAGIC, 16, __u32)
#define IRIG_IOC_R_PPS_TIMER   _IOR(IRIG_IOC_MAGIC, 17, __u32)

#define IRIG_IOC_W_TIME_OFF   _IOW(IRIG_IOC_MAGIC, 18, __s32)
#define IRIG_IOC_R_TIME_OFF   _IOR(IRIG_IOC_MAGIC, 19, __s32)

#endif
